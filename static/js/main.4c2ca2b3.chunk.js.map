{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["cb","switchStatus","el","reset","statusAlive","statusDead","alive","classList","contains","remove","add","textContent","document","querySelectorAll","forEach","scoreEle","querySelector","statusEl","addEventListener","innerHTML","parseInt","toString","e","target","readyState","ResetButton","className","id","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAGwBA,E,gCASpBC,G,UAAe,SAACC,GAA4B,IAKzB,EAId,EAToBC,EAAkB,wDACzCC,EAAc,CAAC,aAAc,YAC7BC,EAAa,UAEbC,EAAQJ,EAAGK,UAAUC,SAASJ,EAAY,KACzCE,GAASH,GACZD,EAAGK,UAAUE,OAAOJ,IACpB,EAAAH,EAAGK,WAAUG,IAAb,QAAoBN,GACpBF,EAAGS,YAAc,UAEjBT,EAAGK,UAAUG,IAAIL,IACjB,EAAAH,EAAGK,WAAUE,OAAb,QAAuBL,GACvBF,EAAGS,YAAc,UArBGX,EAyBlB,WACQY,SAASC,iBAAiB,cAChCC,SAAQ,SAACZ,GACb,IAAIa,EAAWb,EAAGc,cAAc,aAC5BC,EAAWf,EAAGc,cAAc,cACf,OAAbD,GAAkC,OAAbE,IAIzBf,EAAGc,cAAc,SAAUE,iBAAiB,SAAS,WACnDH,EAAUI,WAAaC,SAASL,EAAUI,WAAa,GAAGE,cAG5DnB,EAAGc,cAAc,QAASE,iBAAiB,SAAS,WAClDH,EAAUI,WAAaC,SAASL,EAAUI,WAAa,GAAGE,cAG5DN,EAAUG,iBAAiB,SAAS,WAClCH,EAAUI,UAAY,OAGxBF,EAASC,iBAAiB,SAAS,SAACI,GAClCrB,EAAaqB,EAAEC,gBA7CK,YAAxBX,SAASY,WACLZ,SAASM,iBAAiB,oBAAoB,SAAUI,GACtDtB,OAEFA,IAsDN,IAAMyB,EAAc,WAYlB,OACE,4BACEC,UAAU,6BACVC,GAAG,QACHC,QAfa,WACfhB,SAASC,iBAAiB,aAAaC,SAAQ,SAACQ,GAC9CA,EAAEH,UAAY,OAGhBP,SAASC,iBAAiB,cAAcC,SAAQ,SAACQ,GAC/CrB,EAAaqB,GAAG,QAMlB,iBAUWO,EA/Bf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QC9CcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAAS0B,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c2ca2b3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst ready = function (cb: any) {\n  // Check if the `document` is loaded completely\n  document.readyState === \"loading\"\n    ? document.addEventListener(\"DOMContentLoaded\", function (e) {\n        cb();\n      })\n    : cb();\n};\n\nlet switchStatus = (el: any, reset = false) => {\n  let statusAlive = [\"is-success\", \"is-light\"];\n  let statusDead = \"is-dark\";\n\n  let alive = el.classList.contains(statusAlive[0]);\n  if (!alive || reset) {\n    el.classList.remove(statusDead);\n    el.classList.add(...statusAlive);\n    el.textContent = \"Alive\";\n  } else {\n    el.classList.add(statusDead);\n    el.classList.remove(...statusAlive);\n    el.textContent = \"Dead\";\n  }\n};\n\nready(function () {\n  let elems = document.querySelectorAll(\".js-player\");\n  elems.forEach((el) => {\n    let scoreEle = el.querySelector(\".js-score\");\n    let statusEl = el.querySelector(\".js-status\");\n    if (scoreEle === null || statusEl === null) {\n      return;\n    }\n\n    el.querySelector(\".good\")!.addEventListener(\"click\", () => {\n      scoreEle!.innerHTML = (parseInt(scoreEle!.innerHTML) + 1).toString();\n    });\n\n    el.querySelector(\".bad\")!.addEventListener(\"click\", () => {\n      scoreEle!.innerHTML = (parseInt(scoreEle!.innerHTML) - 1).toString();\n    });\n\n    scoreEle!.addEventListener(\"click\", () => {\n      scoreEle!.innerHTML = \"0\";\n    });\n\n    statusEl.addEventListener(\"click\", (e) => {\n      switchStatus(e.target);\n    });\n  });\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ResetButton />\n    </div>\n  );\n}\n\nconst ResetButton = () => {\n  const resetAll = () => {\n    document.querySelectorAll(\".js-score\").forEach((e) => {\n      e.innerHTML = \"0\";\n    });\n\n    document.querySelectorAll(\".js-status\").forEach((e) => {\n      switchStatus(e, true);\n      return;\n    });\n  };\n\n  return (\n    <button\n      className=\"button is-warning is-light\"\n      id=\"reset\"\n      onClick={resetAll}\n    >\n      Reset Scores\n    </button>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}