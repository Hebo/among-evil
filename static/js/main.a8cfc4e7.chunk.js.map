{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Player","className","type","placeholder","icon","faMinus","size","faPlus","alive","this","props","isAlive","onAliveChange","id","React","Component","StatusButton","btnClasses","btnText","onClick","faSmileBeam","ResetButton","document","querySelectorAll","forEach","e","innerHTML","faTimes","App","useState","players","setPlayers","useEffect","console","log","ps","Array","push","didBinds","useRef","current","length","el","scoreEle","querySelector","statusEl","addEventListener","parseInt","toString","setAlive","playerEls","map","player","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8cfc4e7.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faPlus,\n  faMinus,\n  faSmileBeam,\n} from \"@fortawesome/free-solid-svg-icons\";\n\ntype PlayerState = {\n  isAlive: boolean;\n};\nfunction App() {\n  const numPlayers = 10;\n  const [players, setPlayers] = useState<PlayerState[]>([]);\n\n  useEffect(() => {\n    console.log(\"rendering\");\n    let ps: PlayerState[] = [];\n    [...Array(numPlayers)].forEach(() => {\n      ps.push({ isAlive: true });\n      // return <Player key={index} isAlive={true} />;\n      // return playerTemplate;\n    });\n\n    setPlayers(ps);\n  }, []);\n\n  let didBinds = useRef(false);\n  useEffect(() => {\n    if (didBinds.current) {\n      return;\n    } else if (players.length > 0) {\n      didBinds.current = true;\n    }\n\n    console.log(\"useEffect -> binding\");\n    let elems = document.querySelectorAll(\".js-player\");\n    // console.log(elems)\n    elems.forEach((el) => {\n      let scoreEle = el.querySelector(\".js-score\");\n      let statusEl = el.querySelector(\".js-status\");\n      if (scoreEle === null || statusEl === null) {\n        // console.log(\"not found\")\n        return;\n      }\n      // console.log(\"found\")\n\n      el.querySelector(\".good\")!.addEventListener(\"click\", () => {\n        scoreEle!.innerHTML = (parseInt(scoreEle!.innerHTML) + 1).toString();\n      });\n\n      el.querySelector(\".bad\")!.addEventListener(\"click\", () => {\n        scoreEle!.innerHTML = (parseInt(scoreEle!.innerHTML) - 1).toString();\n      });\n\n      scoreEle!.addEventListener(\"click\", () => {\n        // console.log(\"scoreele\")\n        scoreEle!.innerHTML = \"0\";\n      });\n    });\n  });\n\n  let setAlive = (id: number, isAlive: boolean) => {\n    console.log(\"status updated\");\n    players[id - 1].isAlive = isAlive;\n    setPlayers([...players]);\n  };\n\n  let playerEls = players.map((player, index: number) => {\n    return (\n      <Player\n        key={index}\n        id={index + 1}\n        isAlive={player.isAlive}\n        onAliveChange={setAlive}\n      />\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <ResetButton />\n\n      <ol type=\"1\">{playerEls}</ol>\n    </div>\n  );\n}\n\ntype PlayerProps = {\n  isAlive: boolean;\n  onAliveChange: Function;\n  id: number;\n};\n\nclass Player extends React.Component<PlayerProps> {\n  render() {\n    return (\n      <li>\n        <div className=\"field is-horizontal js-player\">\n          <div className=\"field has-addons\">\n            <div className=\"control\">\n              <input\n                className=\"input player-name\"\n                type=\"text\"\n                placeholder=\"Player\"\n              />\n            </div>\n            <div className=\"control player-score\">\n              <button className=\"js-score button\">0</button>\n            </div>\n          </div>\n          <div className=\"field ml-5\">\n            <button className=\"button is-outlined is-danger bad\">\n              <span className=\"icon is-medium\">\n                <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n              </span>\n            </button>\n            <button className=\"button is-outlined is-success good\">\n              <span className=\"icon is-medium\">\n                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </span>\n            </button>\n\n            <StatusButton\n              alive={this.props.isAlive}\n              onAliveChange={(isAlive: boolean) => {\n                this.props.onAliveChange(this.props.id, isAlive);\n              }}\n            />\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\n\ntype StatusButtonProps = { alive: boolean; onAliveChange: Function };\nconst StatusButton = ({ alive, onAliveChange }: StatusButtonProps) => {\n  let btnClasses,\n    // icon,\n    btnText = null;\n  if (alive) {\n    btnClasses = \"is-success is-light\";\n    btnText = \"Alive\";\n  } else {\n    btnClasses = \"is-dark\";\n    btnText = \"Dead\";\n  }\n\n  return (\n    <button\n      className={`status-btn button js-status ${btnClasses}`}\n      onClick={() => {\n        onAliveChange(!alive);\n      }}\n    >\n      <span>{btnText}</span>\n      <span className=\"icon is-medium\">\n        <FontAwesomeIcon icon={faSmileBeam} size=\"lg\" />\n      </span>\n    </button>\n  );\n};\n\nconst ResetButton = () => {\n  const resetAll = () => {\n    document.querySelectorAll(\".js-score\").forEach((e) => {\n      e.innerHTML = \"0\";\n    });\n\n    document.querySelectorAll(\".js-status\").forEach((e) => {\n      // switchStatus(e, true);\n      return;\n    });\n  };\n\n  return (\n    <div className=\"column has-text-centered\">\n      <button\n        className=\"button is-danger is-outlined\"\n        id=\"reset\"\n        onClick={resetAll}\n      >\n        <span>Reset Scores</span>\n        <span className=\"icon is-medium\">\n          <FontAwesomeIcon icon={faTimes} size=\"lg\" />\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}