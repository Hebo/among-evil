{"version":3,"sources":["components/Player.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Player","props","scoreStyle","boxShadow","scoreColor","scoreNormalized","className","cn","isAlive","id","type","placeholder","value","player","name","onChange","onNameChange","tabIndex","style","onClick","onScoreChange","bind","reset","score","diff","icon","faMinus","size","faPlus","alive","onAliveChange","normalizedScore","h","Math","floor","s","abs","convert","hsv","hex","StatusButton","btnClasses","btnIcon","btnText","faSmileBeam","faSkullCrossbones","ResetButton","onResetAll","faTimes","App","useState","ps","Array","forEach","_","index","push","toString","players","setPlayers","handleScoreChange","console","log","handleNameChange","event","currentTarget","idx","findIndex","el","setAlive","scoresNormalized","scores","map","p","minScore","min","apply","range","max","reduce","acc","normalizeScores","playerEls","key","handle","list","setList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4UAiCMA,G,MAAS,SAACC,GACd,IAAMC,EAAa,CAKjBC,UAAW,qBAAuBC,EAAWH,EAAMI,kBAGrD,OACE,yBACEC,UAAWC,IACT,yGAGF,yBACED,UAAWC,IAAG,gCAAiC,CAC7C,gBAAiBN,EAAMO,WAGzB,2BAAOF,UAAU,SAASL,EAAMQ,GAAhC,MAEF,yBACEH,UAAWC,IAAG,mBAAoB,CAChC,gBAAiBN,EAAMO,WAGzB,yBAAKF,UAAU,WACb,2BACEA,UAAU,oBACVI,KAAK,OACLC,YAAW,kBAAaV,EAAMQ,IAC9BG,MAAOX,EAAMY,OAAOC,KACpBC,SAAUd,EAAMe,gBAGpB,yBACEV,UAAWC,IAAG,uBAAwB,CACpC,gBAAiBN,EAAMO,WAGzB,4BACEF,UAAU,SACVW,UAAW,EACXC,MAAOhB,EACPiB,QAASlB,EAAMmB,cAAcC,KAAK,KAAMpB,EAAMQ,GAAI,CAChDa,OAAO,KAGRrB,EAAMsB,SAIb,yBACEjB,UAAWC,IAAG,wBAAyB,CACrC,gBAAiBN,EAAMO,WAGzB,yBAAKF,UAAU,2BACb,4BACEA,UAAU,mCACVW,UAAW,EACXE,QAASlB,EAAMmB,cAAcC,KAAK,KAAMpB,EAAMQ,GAAI,CAChDe,MAAO,KAGT,0BAAMlB,UAAU,kBACd,kBAAC,IAAD,CAAiBmB,KAAMC,IAASC,KAAK,SAGzC,4BACErB,UAAU,qCACVW,UAAW,EACXE,QAASlB,EAAMmB,cAAcC,KAAK,KAAMpB,EAAMQ,GAAI,CAChDe,KAAM,KAGR,0BAAMlB,UAAU,kBACd,kBAAC,IAAD,CAAiBmB,KAAMG,IAAQD,KAAK,UAK1C,kBAAC,EAAD,CACEE,MAAO5B,EAAMO,QACbsB,cAAe,SAACtB,GACdP,EAAM6B,cAAc7B,EAAMQ,GAAID,UAQpCJ,EAAa,SAAC2B,GAClB,IAEIR,EAA0B,IAAlBQ,EACRC,EAAIC,KAAKC,MAAe,IAARX,EAAe,KAC/BY,EAAKF,KAAKG,IAAIb,EAAQ,IAAM,GAAxB,GAGR,MAAO,IAAMc,IAAQC,IAAIC,IAAI,CAACP,EAAGG,EAFzB,OAMJK,EAAe,SAAC,GAAiD,IACjEC,EACFC,EAFoBb,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,cAG3Ba,EAAU,KAWZ,OAVId,GACFY,EAAa,sBACbE,EAAU,QACVD,EAAUE,MAEVH,EAAa,UACbE,EAAU,UACVD,EAAUG,KAIV,4BACEvC,UAAS,2CAAsCmC,GAC/CxB,UAAW,EACXE,QAAS,WACPW,GAAeD,KAGjB,8BAAOc,GACP,0BAAMrC,UAAU,kBACd,kBAAC,IAAD,CAAiBmB,KAAMiB,EAASf,KAAK,UASvCmB,EAAc,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,WACrB,OACE,yBAAKzC,UAAU,4BACb,4BACEA,UAAU,+BACVG,GAAG,QACHU,QAAS4B,GAET,8CACA,0BAAMzC,UAAU,kBACd,kBAAC,IAAD,CAAiBmB,KAAMuB,IAASrB,KAAK,W,MClEhCsB,MArFf,WACE,IADa,EAEiBC,oBAAwB,WACpD,IAAIC,EAAoB,GAIxB,OAHA,YAAIC,MAHa,KAGMC,SAAQ,SAACC,EAAGC,GACjCJ,EAAGK,KAAK,CAAE1C,KAAM,GAAIL,GAAI8C,EAAME,WAAYjD,SAAS,EAAMe,MAAO,OAE3D4B,KAPI,mBAENO,EAFM,KAEGC,EAFH,KAUPC,EAAoB,SAACnD,EAAD,GAAoD,IAAD,IAApCe,YAAoC,MAA7B,EAA6B,MAA1BF,aAA0B,SAC3EuC,QAAQC,IAAI,eACRxC,EACFoC,EAAQjD,EAAK,GAAGc,MAAQ,EAExBmC,EAAQjD,EAAK,GAAGc,OAASC,EAG3BmC,EAAW,YAAID,KAGXK,EAAmB,SACvBtD,EACAuD,GAGA,IAAIpD,EAAQoD,EAAMC,cAAcrD,MAChC+C,GAAW,SAACR,GACV,IAAIe,EAAMf,EAAGgB,WAAU,SAACC,GAAD,OAAQA,EAAG3D,KAAOA,KAGzC,OAFA0C,EAAGe,GAAKpD,KAAOF,EAER,YAAIuC,OAITkB,EAAW,SAAC5D,EAAYD,GAC5BmD,GAAW,SAACR,GAEV,OADAA,EAAG1C,EAAK,GAAGD,QAAUA,EACd,YAAI2C,OAcXmB,EAzEkB,SAACZ,GACvB,IACIa,EAASb,EAAQc,KAAI,SAACC,GAAD,OAAOA,EAAElD,SAC9BmD,EAAWzC,KAAK0C,IAAIC,MAAM,KAAML,GAChCM,EAAQ5C,KAAK6C,IAAIF,MAAM,KAAML,GAAUG,EAc3C,OAZiBhB,EAAQqB,QAAO,SAACC,EAAeP,GAO9C,OALEO,EAAIP,EAAEhE,IADM,IAAVoE,EANa,IASFJ,EAAElD,MAAQmD,GAAYG,EAG9BG,IACN,IA2DoBC,CAAgBvB,GAEnCwB,EAAYxB,EAAQc,KAAI,SAAC3D,EAAQ0C,GACnC,OACE,kBAAC,EAAD,CACE4B,IAAK5B,EACL9C,GAAI8C,EAAQ,EACZ/C,QAASK,EAAOL,QAChBsB,cAAeuC,EACfjD,cAAewC,EACf5C,aAAc+C,EAAiB1C,KAAK,KAAMR,EAAOJ,IACjDc,MAAOV,EAAOU,MACdV,OAAQA,EACRR,gBAAiBiE,EAAiBf,QAKxC,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,CAAayC,WA9BA,WACfY,EACED,EAAQc,KAAI,SAACC,GAGX,OAFAA,EAAEjE,SAAU,EACZiE,EAAElD,MAAQ,EACHkD,SA2BT,kBAAC,gBAAD,CACEW,OAAO,uBACPC,KAAM3B,EACN4B,QAAS3B,GAERuB,KClGWK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.7a42d055.chunk.js","sourcesContent":["import React from \"react\";\nimport cn from \"classnames\";\nimport convert from \"color-convert\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faPlus,\n  faMinus,\n  faSmileBeam,\n  faSkullCrossbones,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./Player.css\";\n\nexport type PlayerState = {\n  id: string;\n  isAlive: boolean;\n  score: number;\n  name?: string;\n};\n\ntype PlayerProps = {\n  isAlive: boolean;\n  onAliveChange: Function;\n  onScoreChange: Function;\n  onNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  id: number;\n  score: number;\n  scoreNormalized: number;\n  player: PlayerState;\n};\n\nconst Player = (props: PlayerProps) => {\n  const scoreStyle = {\n    // other, aborted design attempts\n    // backgroundColor: scoreColor(this.props.scoreNormalized),\n    // borderColor: scoreColor(this.props.scoreNormalized),\n    // color: this.props.scoreNormalized < 0.5 ? \"white\" : \"black\"\n    boxShadow: \"inset 0 0 2px 1px \" + scoreColor(props.scoreNormalized),\n  };\n\n  return (\n    <div\n      className={cn(\n        \"Player_main mb-0 is-horizontal is-grouped is-grouped-centered is-grouped-multiline js-player is-flex\"\n      )}\n    >\n      <div\n        className={cn(\"Player__numberLabel is-normal\", {\n          \"Player--dead\": !props.isAlive,\n        })}\n      >\n        <label className=\"label\">{props.id}.</label>\n      </div>\n      <div\n        className={cn(\"field has-addons\", {\n          \"Player--dead\": !props.isAlive,\n        })}\n      >\n        <div className=\"control\">\n          <input\n            className=\"input player-name\"\n            type=\"text\"\n            placeholder={`Player #${props.id}`}\n            value={props.player.name}\n            onChange={props.onNameChange}\n          />\n        </div>\n        <div\n          className={cn(\"control player-score\", {\n            \"Player--dead\": !props.isAlive,\n          })}\n        >\n          <button\n            className=\"button\"\n            tabIndex={-1}\n            style={scoreStyle}\n            onClick={props.onScoreChange.bind(null, props.id, {\n              reset: true,\n            })}\n          >\n            {props.score}\n          </button>\n        </div>\n      </div>\n      <div\n        className={cn(\"field is-grouped ml-5\", {\n          \"Player--dead\": !props.isAlive,\n        })}\n      >\n        <div className=\"buttons has-addons mb-0\">\n          <button\n            className=\"button is-outlined is-danger bad\"\n            tabIndex={-1}\n            onClick={props.onScoreChange.bind(null, props.id, {\n              diff: -1,\n            })}\n          >\n            <span className=\"icon is-medium\">\n              <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n            </span>\n          </button>\n          <button\n            className=\"button is-outlined is-success good\"\n            tabIndex={-1}\n            onClick={props.onScoreChange.bind(null, props.id, {\n              diff: +1,\n            })}\n          >\n            <span className=\"icon is-medium\">\n              <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n            </span>\n          </button>\n        </div>\n\n        <StatusButton\n          alive={props.isAlive}\n          onAliveChange={(isAlive: boolean) => {\n            props.onAliveChange(props.id, isAlive);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst scoreColor = (normalizedScore: number): string => {\n  let backgroundOpacity = 0.9;\n\n  let score = normalizedScore * 100;\n  let h = Math.floor((score * 120) / 100);\n  let s = (Math.abs(score - 50) / 50) * (backgroundOpacity * 100);\n  let v = 100;\n\n  return \"#\" + convert.hsv.hex([h, s, v]);\n};\n\ntype StatusButtonProps = { alive: boolean; onAliveChange: Function };\nconst StatusButton = ({ alive, onAliveChange }: StatusButtonProps) => {\n  let btnClasses,\n    btnIcon,\n    btnText = null;\n  if (alive) {\n    btnClasses = \"is-success is-light\";\n    btnText = \"Alive\";\n    btnIcon = faSmileBeam;\n  } else {\n    btnClasses = \"is-dark\";\n    btnText = \"Press F\";\n    btnIcon = faSkullCrossbones;\n  }\n\n  return (\n    <button\n      className={`status-btn button ml-2 js-status ${btnClasses}`}\n      tabIndex={-1}\n      onClick={() => {\n        onAliveChange(!alive);\n      }}\n    >\n      <span>{btnText}</span>\n      <span className=\"icon is-medium\">\n        <FontAwesomeIcon icon={btnIcon} size=\"lg\" />\n      </span>\n    </button>\n  );\n};\n\ntype ResetButtonProps = {\n  onResetAll: (event: React.MouseEvent<HTMLButtonElement>) => void;\n};\nconst ResetButton = ({ onResetAll }: ResetButtonProps) => {\n  return (\n    <div className=\"column has-text-centered\">\n      <button\n        className=\"button is-danger is-outlined\"\n        id=\"reset\"\n        onClick={onResetAll}\n      >\n        <span>Reset Scores</span>\n        <span className=\"icon is-medium\">\n          <FontAwesomeIcon icon={faTimes} size=\"lg\" />\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport { Player };\nexport { ResetButton };\n","import React, { useState } from \"react\";\nimport { ReactSortable } from \"react-sortablejs\";\n\nimport { Player, ResetButton, PlayerState } from \"./components/Player\";\nimport \"./App.css\";\n\ninterface ScoreMap {\n  [key: string]: number;\n}\n\nconst normalizeScores = (players: PlayerState[]): ScoreMap => {\n  let defaultScore = 0.5;\n  let scores = players.map((p) => p.score);\n  let minScore = Math.min.apply(null, scores);\n  let range = Math.max.apply(null, scores) - minScore;\n\n  let normalized = players.reduce((acc: ScoreMap, p) => {\n    if (range === 0) {\n      acc[p.id] = defaultScore;\n    } else {\n      acc[p.id] = (p.score - minScore) / range;\n    }\n\n    return acc;\n  }, {});\n\n  // console.log(normalized);\n\n  return normalized;\n};\n\nfunction App() {\n  const numPlayers = 10;\n  const [players, setPlayers] = useState<PlayerState[]>(() => {\n    let ps: PlayerState[] = [];\n    [...Array(numPlayers)].forEach((_, index) => {\n      ps.push({ name: \"\", id: index.toString(), isAlive: true, score: 0 });\n    });\n    return ps;\n  });\n\n  const handleScoreChange = (id: number, { diff = 0, reset = false }): void => {\n    console.log(\"handlescore\");\n    if (reset) {\n      players[id - 1].score = 0;\n    } else {\n      players[id - 1].score += diff;\n    }\n\n    setPlayers([...players]);\n  };\n\n  const handleNameChange = (\n    id: string,\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    // console.log(\"handleNameChange: \", id, event);\n    let value = event.currentTarget.value;\n    setPlayers((ps) => {\n      let idx = ps.findIndex((el) => el.id === id);\n      ps[idx].name = value;\n\n      return [...ps];\n    });\n  };\n\n  const setAlive = (id: number, isAlive: boolean) => {\n    setPlayers((ps) => {\n      ps[id - 1].isAlive = isAlive;\n      return [...ps];\n    });\n  };\n\n  const resetAll = () => {\n    setPlayers(\n      players.map((p) => {\n        p.isAlive = true;\n        p.score = 0;\n        return p;\n      })\n    );\n  };\n\n  let scoresNormalized = normalizeScores(players);\n\n  let playerEls = players.map((player, index: number) => {\n    return (\n      <Player\n        key={index}\n        id={index + 1}\n        isAlive={player.isAlive}\n        onAliveChange={setAlive}\n        onScoreChange={handleScoreChange}\n        onNameChange={handleNameChange.bind(null, player.id)}\n        score={player.score}\n        player={player}\n        scoreNormalized={scoresNormalized[index]}\n      />\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <ResetButton onResetAll={resetAll} />\n\n      <ReactSortable\n        handle=\".Player__numberLabel\"\n        list={players}\n        setList={setPlayers}\n      >\n        {playerEls}\n      </ReactSortable>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}