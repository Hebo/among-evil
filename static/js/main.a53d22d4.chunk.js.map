{"version":3,"sources":["components/Player.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Player","scoreStyle","boxShadow","scoreColor","this","props","scoreNormalized","className","cn","isAlive","id","type","placeholder","tabIndex","style","onClick","onScoreChange","bind","reset","score","diff","icon","faMinus","size","faPlus","alive","onAliveChange","React","Component","normalizedScore","h","Math","floor","s","abs","convert","hsv","hex","StatusButton","btnClasses","btnIcon","btnText","faSmileBeam","faSkullCrossbones","ResetButton","onResetAll","faTimes","App","useState","ps","Array","forEach","_","index","push","toString","players","setPlayers","handleScoreChange","console","log","setAlive","scoresNormalized","scores","map","p","minScore","min","apply","range","max","normalized","reduce","acc","normalizeScores","playerEls","player","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a53d22d4.chunk.js","sourcesContent":["import React from \"react\";\nimport cn from \"classnames\";\nimport convert from \"color-convert\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faPlus,\n  faMinus,\n  faSmileBeam,\n  faSkullCrossbones,\n} from \"@fortawesome/free-solid-svg-icons\";\n\ntype PlayerProps = {\n  isAlive: boolean;\n  onAliveChange: Function;\n  onScoreChange: Function;\n  id: number;\n  score: number;\n  scoreNormalized: number;\n};\n\nclass Player extends React.Component<PlayerProps> {\n  render() {\n    const scoreStyle = {\n      // other, aborted design attempts\n      // backgroundColor: scoreColor(this.props.scoreNormalized),\n      // borderColor: scoreColor(this.props.scoreNormalized),\n      // color: this.props.scoreNormalized < 0.5 ? \"white\" : \"black\"\n      boxShadow: \"inset 0 0 2px 1px \" + scoreColor(this.props.scoreNormalized),\n    };\n\n    return (\n      <div className=\"Player_main mb-0 is-horizontal is-grouped is-grouped-centered is-grouped-multiline js-player is-flex\">\n        <div\n          className={cn(\"Player__numberLabel is-normal\", {\n            \"Player--dead\": !this.props.isAlive,\n          })}\n        >\n          <label className=\"label\">{this.props.id}.</label>\n        </div>\n        <div\n          className={cn(\"field has-addons\", {\n            \"Player--dead\": !this.props.isAlive,\n          })}\n        >\n          <div className=\"control\">\n            <input\n              className=\"input player-name\"\n              type=\"text\"\n              placeholder={`Player #${this.props.id}`}\n            />\n          </div>\n          <div\n            className={cn(\"control player-score\", {\n              \"Player--dead\": !this.props.isAlive,\n            })}\n          >\n            <button\n              className=\"button\"\n              tabIndex={-1}\n              style={scoreStyle}\n              onClick={this.props.onScoreChange.bind(this, this.props.id, {\n                reset: true,\n              })}\n            >\n              {this.props.score}\n            </button>\n          </div>\n        </div>\n        <div\n          className={cn(\"field is-grouped ml-5\", {\n            \"Player--dead\": !this.props.isAlive,\n          })}\n        >\n          <div className=\"buttons has-addons mb-0\">\n            <button\n              className=\"button is-outlined is-danger bad\"\n              tabIndex={-1}\n              onClick={this.props.onScoreChange.bind(this, this.props.id, {\n                diff: -1,\n              })}\n            >\n              <span className=\"icon is-medium\">\n                <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n              </span>\n            </button>\n            <button\n              className=\"button is-outlined is-success good\"\n              tabIndex={-1}\n              onClick={this.props.onScoreChange.bind(this, this.props.id, {\n                diff: +1,\n              })}\n            >\n              <span className=\"icon is-medium\">\n                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </span>\n            </button>\n          </div>\n\n          <StatusButton\n            alive={this.props.isAlive}\n            onAliveChange={(isAlive: boolean) => {\n              this.props.onAliveChange(this.props.id, isAlive);\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst scoreColor = (normalizedScore: number): string => {\n  let backgroundOpacity = 0.9;\n\n  let score = normalizedScore * 100;\n  let h = Math.floor((score * 120) / 100);\n  let s = (Math.abs(score - 50) / 50) * (backgroundOpacity * 100);\n  let v = 100;\n\n  return \"#\" + convert.hsv.hex([h, s, v]);\n};\n\ntype StatusButtonProps = { alive: boolean; onAliveChange: Function };\nconst StatusButton = ({ alive, onAliveChange }: StatusButtonProps) => {\n  let btnClasses,\n    btnIcon,\n    btnText = null;\n  if (alive) {\n    btnClasses = \"is-success is-light\";\n    btnText = \"Alive\";\n    btnIcon = faSmileBeam;\n  } else {\n    btnClasses = \"is-dark\";\n    btnText = \"Press F\";\n    btnIcon = faSkullCrossbones;\n  }\n\n  return (\n    <button\n      className={`status-btn button ml-2 js-status ${btnClasses}`}\n      tabIndex={-1}\n      onClick={() => {\n        onAliveChange(!alive);\n      }}\n    >\n      <span>{btnText}</span>\n      <span className=\"icon is-medium\">\n        <FontAwesomeIcon icon={btnIcon} size=\"lg\" />\n      </span>\n    </button>\n  );\n};\n\ntype ResetButtonProps = {\n  onResetAll: (event: React.MouseEvent<HTMLButtonElement>) => void;\n};\nconst ResetButton = ({ onResetAll }: ResetButtonProps) => {\n  return (\n    <div className=\"column has-text-centered\">\n      <button\n        className=\"button is-danger is-outlined\"\n        id=\"reset\"\n        onClick={onResetAll}\n      >\n        <span>Reset Scores</span>\n        <span className=\"icon is-medium\">\n          <FontAwesomeIcon icon={faTimes} size=\"lg\" />\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport { Player };\nexport { ResetButton };\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport { Player, ResetButton } from \"./components/Player\";\n\ntype PlayerState = {\n  id: string;\n  isAlive: boolean;\n  score: number;\n};\n\ninterface ScoreMap {\n  [key: string]: number;\n}\n\nconst normalizeScores = (players: PlayerState[]): ScoreMap => {\n  let defaultScore = 0.5;\n  let scores = players.map((p) => p.score);\n  let minScore = Math.min.apply(null, scores);\n  let range = Math.max.apply(null, scores) - minScore;\n\n  let normalized = players.reduce((acc: ScoreMap, p) => {\n    if (range === 0) {\n      acc[p.id] = defaultScore;\n    } else {\n      acc[p.id] = (p.score - minScore) / range;\n    }\n\n    return acc;\n  }, {});\n\n  console.log(normalized);\n\n  return normalized;\n};\n\nfunction App() {\n  const numPlayers = 10;\n  const [players, setPlayers] = useState<PlayerState[]>(() => {\n    let ps: PlayerState[] = [];\n    [...Array(numPlayers)].forEach((_, index) => {\n      ps.push({ id: index.toString(), isAlive: true, score: 0 });\n    });\n    return ps;\n  });\n\n  const handleScoreChange = (id: number, { diff = 0, reset = false }): void => {\n    console.log(\"handlescore\");\n    if (reset) {\n      players[id - 1].score = 0;\n    } else {\n      players[id - 1].score += diff;\n    }\n\n    setPlayers([...players]);\n  };\n\n  const setAlive = (id: number, isAlive: boolean) => {\n    setPlayers((ps) => {\n      ps[id - 1].isAlive = isAlive;\n      return [...ps];\n    });\n  };\n\n  const resetAll = () => {\n    setPlayers(\n      players.map((p) => {\n        p.isAlive = true;\n        p.score = 0;\n        return p;\n      })\n    );\n  };\n\n  let scoresNormalized = normalizeScores(players);\n\n  let playerEls = players.map((player, index: number) => {\n    return (\n      <Player\n        key={index}\n        id={index + 1}\n        isAlive={player.isAlive}\n        onAliveChange={setAlive}\n        onScoreChange={handleScoreChange}\n        score={player.score}\n        scoreNormalized={scoresNormalized[index]}\n      />\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <ResetButton onResetAll={resetAll} />\n\n      {playerEls}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}